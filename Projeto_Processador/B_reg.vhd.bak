library ieee;
use ieee.std_logic_1164.all;

entity B_reg is
   port (
        w_data : in std_logic_vector(7 downto 0);
        addr_r, addr_w : in std_logic_vector(2 downto 0);
        en_rd, en_wr: in std_logic;
        clk, clr : in std_logic;
        r_data: out std_logic_vector(7 downto 0)
);
end B_reg;

architecture logica of B_reg is

        type reg_array is array (0 to 15) of std_logic_vector(7 downto 0);
        signal V : reg_array;
        signal d: std_logic_vector(7 downto 0);
        signal V_i: std_logic_vector(7 downto 0);

	component mux_8
     port(
	A: in std_logic_vector(7 downto 0);
	B: in std_logic_vector(7 downto 0);
	C: in std_logic_vector(7 downto 0);
	D: in std_logic_vector(7 downto 0);
	E: in std_logic_vector(7 downto 0);
	F: in std_logic_vector(7 downto 0);
	G: in std_logic_vector(7 downto 0);
	H: in std_logic_vector(7 downto 0);
	S: in std_logic_vector(2 downto 0);
	Y_8: out std_logic_vector(7 downto 0)
	);
    end component;
    
    component mux_16
     port(
	A: in std_logic_vector(7 downto 0);
	B: in std_logic_vector(7 downto 0);
	C: in std_logic_vector(7 downto 0);
	D: in std_logic_vector(7 downto 0);
	E: in std_logic_vector(7 downto 0);
	F: in std_logic_vector(7 downto 0);
	G: in std_logic_vector(7 downto 0);
	H: in std_logic_vector(7 downto 0);
	I: in std_logic_vector(7 downto 0);
	J: in std_logic_vector(7 downto 0);
	K: in std_logic_vector(7 downto 0);
	L: in std_logic_vector(7 downto 0);
	M: in std_logic_vector(7 downto 0);
	N: in std_logic_vector(7 downto 0);
	O: in std_logic_vector(7 downto 0);
	P: in std_logic_vector(7 downto 0);
	S: in std_logic_vector(2 downto 0);
	Y_16: out std_logic_vector(7 downto 0)
	);
    end component;        

    component reg_N
        port (ck, load, clr, set: in  std_logic;
    	I : in std_logic_vector(7 downto 0);
    	q : out std_logic_vector(7 downto 0));
    end component;

    component decoder_4x8
        port (
            en : in std_logic;
            s : in std_logic_vector(2 downto 0);
            d : out std_logic_vector(7 downto 0)
        );
    end component;

begin

    Decoder: decoder_4x8 port map(
		en => en_wr,
		s => addr_w,
		d => d
	);

    gen_regs: for i in 0 to 15 generate
        reg_inst: reg_N port map(
            ck => clk,
            load => d(i),
            clr => clr,
            set => '0',
            I => w_data,
            q => V(i)
        );
    end generate;

	mux_M_i: mux_16 port map(
	  A => V(0),
	  B => V(1),
	  C => V(2),
	  D => V(3),
	  E => V(4),
	  F => V(5),
	  G => V(6),
	  H => V(7),
	   I => V(8),
	  J => V(9),
	  K => V(10),
	  L => V(11),
	  M => V(12),
	  N => V(13),
	  O => V(14),
	  P => V(15),
	  S => addr_r,
	  Y_16 => V_i
	); 

	READ_OUT_REGISTER: reg_N port map(
        	ck => clk,
        	load => en_rd,
 	    	clr => clr,
          	set => '0',
            	I => V_i,
	    	q => r_data
        	);

end logica;
