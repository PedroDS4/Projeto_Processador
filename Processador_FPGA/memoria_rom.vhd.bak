library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity rom256_16b is
    port (
        clk  : in  std_logic;
        addr : in  std_logic_vector(7 downto 0);
        data : out std_logic_vector(15 downto 0)
    );
end entity rom256_16b;

architecture logica of rom256_16b is

    type rom_array is array (0 to 255) of std_logic_vector(15 downto 0);

    -- Programa de Conversão Binário -> ASCII
    constant ROM_CONTENT : rom_array := (
        0  => B"0001000000000000", -- LDR R0, Mem[0]
        1  => B"0001000100000001", -- LDR R1, Mem[1]
        2  => B"0001001000000010", -- LDR R2, Mem[2]
        3  => B"0001001100000011", -- LDR R3, Mem[3]
        4  => B"0001010000000100", -- LDR R4, Mem[4]
        5  => B"0001010100000101", -- LDR R5, Mem[5]
        6  => B"0011011101000000", -- MOV R7, R4
        7  => B"0011100001000000", -- MOV R8, R4
        8  => B"0011011000000000", -- MOV R6, R0
        9  => B"1010000001100001", -- loop_c: CMP R6, R1
        10 => B"1100000000010000", -- JC fim_c (para 19)
        11 => B"0101011001100001", -- SUB R6, R6, R1
        12 => B"0100011101110101", -- ADD R7, R7, R5
        13 => B"1011000000001001", -- JMP loop_c (para 9)
        14 => B"1010000001100010", -- loop_d: CMP R6, R2
        15 => B"1100000000010101", -- JC fim_d (para 21)
        16 => B"0101011001100010", -- SUB R6, R6, R2
        17 => B"0100100010000101", -- ADD R8, R8, R5
        18 => B"1011000000001110", -- JMP loop_d (para 14)
        19 => B"0100011101110011", -- fim_c: ADD R7, R7, R3
        20 => B"0010011100000110", -- STR R7, Mem[6]
        21 => B"0100100010000011", -- fim_d: ADD R8, R8, R3
        22 => B"0010100000000111", -- STR R8, Mem[7]
        23 => B"0100011001100011", -- ADD R6, R6, R3
        24 => B"0010011000001000", -- STR R6, Mem[8]
        25 => B"0000000000000000", -- HLT
        others => B"0000000000000000"
    );

begin
    process(clk)
    begin
        if rising_edge(clk) then
            data <= ROM_CONTENT(to_integer(unsigned(addr)));
        end if;
    end process;
    
end logica;

